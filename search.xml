<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[以生活的例子说明单线程和多线程]]></title>
    <url>%2F2018%2F09%2F11%2F%E4%BB%A5%E7%94%9F%E6%B4%BB%E7%9A%84%E4%BE%8B%E5%AD%90%E8%AF%B4%E6%98%8E%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1. 程序设计的目标在我看来单从程序的角度来看，一个好的程序的目标应该是性能与用户体验的平衡。当然一个程序是否能够满足用户的需求暂且不谈，这是业务层面的问题，我们仅仅讨论程序本身。围绕两点来展开，性能与用户体验。 性能：在其他同等条件下，高性能的程序应该可以等同于CPU的利用率，CPU的利用率越高(一直在工作，没有闲下来的时候)，程序的性能越高。 体验：这里的体验不只是界面多么漂亮，功能多么顺手，这里的体验指程序的响应速度，响应速度越快，用户体验越好。 下面我们就这两点进行各种模型的讨论2. 单线程多任务无阻塞以生活中食堂打饭的场景作为比喻，假设有这样的场景，小A，小B，小C 在窗口依次排队打饭。 假设窗口负责打饭的阿姨打一个菜需要耗时1秒。如果小A需要2个菜，小B需要3个菜，小C需要2个菜。如下： 阿姨(CPU)：打一个菜需要1秒123小A：2个菜小B：3个菜小C：2个菜 那么在这种模型下将所有服务做完阿姨需要耗时 2 + 3 + 2 = 7秒 阿姨 = CPU 小A,小B,小C = 任务(这里是以任务为概念，表示需要做一些事情) 这种模型下CPU是满负荷不间断运转的，没有空闲，用户体验还不错。这种程序中每个任务的耗时都比较小，是非常理想的状态，一般情况下基本不太可能存在。3. 单线程多任务IO阻塞 将上面的场景稍微做改动： 阿姨：打一个菜需要1秒123小A：2个菜，但是忘记带钱了，要找同学送过来，估计需要等5分钟可以送到(可以理解为磁盘IO)小B：3个菜小C：2个菜 这种情况下小A这里发生了阻塞，实际上小A这里耗费了5分钟也就是 300秒+ 2个菜的时间，也就是302秒，而CPU则空闲了300秒，实际上工作2秒。 所有服务做完花费 302 + 3 + 2 = 307秒 CPU实际工作7秒，等待300秒。 极大浪费了CPU的时钟周期。 用户体验很差，因为小A阻塞的时候，后面的所有人都等着，而实际上此时CPU空闲。所以单线程中不要有阻塞出现。4. 单线程多任务异步IO 还是上面的模型，加入一个角色：值日生小哥，他负责事先询问每一个人是否带钱了，如果带钱了则允许打菜，否则把钱准备好了再说。12345&lt;1&gt; 值日生小哥问小A准备好打菜了吗，小A说忘带钱了，值日生小哥说，你把钱准备好了再说，小A开始准备(需要300秒，从此刻开始记时)。&lt;2&gt; 值日生小哥问小B准备好打菜了吗，小B说可以了，阿姨服务小B，耗时3秒&lt;3&gt; 值日生小哥问小C准备好打菜了吗，小C说可以了，阿姨服务小C，耗时2秒&lt;4&gt; 值日生小哥问小A准备好了没有，小A说还要等一会，阿姨由于没有人过来服务，处于空闲状态&lt;5&gt; 300秒之后，小A准备好了，阿姨服务小A，耗时2秒 整个过程做完耗时 300 + 2 = 302秒 CPU工作7秒，空闲295秒 值日生小哥相当于select模型中的select功能，负责轮询任务是否可以工作，如果可以则直接工作，否则继续轮询。在小A阻塞的300秒里面，阿姨(CPU)没有傻等，而是在服务后面的人，也就是小B和小C，所以这里与模型3不同的是，这里有5秒CPU是工作的。 如果打饭的人越多，这种模型CPU的利用率越高，例如如果有小D，小E，小F…… 等需要服务，CPU可以在小A阻塞的300秒期间内继续服务其他人。实际上值日生小哥轮询也会耗时，这个耗时是很少的，几乎可以忽略不计，但是如果任务非常多，这个轮询还是会影响性能的，但是epoll模型已经不使用轮询的方式，相当于A，B，C会主动跟值日生小哥报告，说我准备好了，可以直接打菜了。 这种模式下用户体验好，CPU利用率高(任务越多利用率越高)5. 单线程多任务，有耗时计算回到最开始的模型，如下：1234阿姨：打一个菜需要1秒小A：200个菜小B：3个菜小C：2个菜 顺序做完所有任务，需要耗时 200 + 3 + 2 = 205秒， CPU无空闲，但是用户体验却不是很好，因为显然后面的 B，C 需要等待小A 200秒的时间，这种情况下是没有IO阻塞的，但是任务A本身太耗CPU了，所以说如果单线程中出现了耗时的操作，一定会影响体验(IO操作或者是耗时的计算都属于耗时的操作，都会导致阻塞，但是这两种导致阻塞的性质是不一样的)。在所有的单线程模型中都不允许出现阻塞的情况，如果出现，那么用户体验是极差的，例如在UI编程中(QT,C# Winform)是不允许在UI线程中做耗时的操作的，否则会导致UI界面无响应。 编写Nodejs程序的时候，我们所写的代码实际上是在一个线程中执行的，所以也不允许有阻塞的操作(当然整个Nodejs框架实现异步，一定不止一个线程)。 出现阻塞的情况一般有2种，一种是IO阻塞，例如典型的如磁盘操作，这种情况下的阻塞会导致CPU空闲等待(当然现代操作系统中如果IO阻塞，操作系统一定会将导致IO阻塞的线程挂起)。这种阻塞的情况，可以通过异步IO的方法避免，这样就避免程序中仅有的单线程被操作系统挂起。另一种情况下是确实有非常多的计算操作，例如一个复杂的加密算法，确实需要消耗非常多的CPU时间，这种情况下CPU并不是空闲的，反而是全负荷工作的。这种CPU密集的工作不适合放在单线程中，虽然CPU的利用率很高，但是用户体验并不是很好。这种情况下使用多线程反而会更好，例如如果3个任务，每个任务都在一个线程中，也就是有3个线程，A任务在ThreadA中，B任务在ThreadB中，C任务在ThreadC中，那么即使A任务的计算量比较大，B，C两个任务所在的线程也不必等待A任务完成之后再工作，他们也有机会得到调度，这是由操作系统来完成的。这样就不会因为某一个任务计算量大，而导致阻塞其他任务而影响体验了。回到顶部6. 多线程程序我们将上面的模型改造成多线程的模型是怎样的呢，我们在模型5的基础上添加一个角色，管理员大叔(操作系统的角色)：1234阿姨：打一个菜需要1秒小A：200个菜小B：3个菜小C：2个菜 加入管理员大叔之后变成这样的了，小A打两个菜之后，大叔说，你打的菜太多了，不能因为你要打200个菜，让后面的同学都没有机会打菜，你打两个菜之后等一会，让后面的同学也有机会。 大叔让小B打两个菜，然后让小C打两个菜(小C完成)，然后再让小A打两个菜(完成之后小A总共就有4个菜了)，再让小B打1个菜(此时小B总共打3个菜，完成)，然后小A打剩下的196个菜。 CPU的利用率：很高，阿姨在不断的工作 用户体验：不错，即使小A要打200个菜，小B，小C也有机会。 当然如果小A说我是帮校长打菜，要快一点(线程优先级高)，那也只能先把小A服务完 总耗时： 200 + 3 + 2 + (大叔指挥安排所消耗的时间，包括从小C切换回小A的时候，大叔要知道小A上次打的菜是哪两个，这次应该接着打什么菜，这相当于线程上下文切换的开销以及线程环境的保存与恢复)，所以并不是线程越多越好，线程非常多的时候大叔估计会焦头烂额吧，要记住这么状态，切换来切换去也耗时间。 这种模型下实际上是将小A的耗时任务，分成多份去执行而不是集中执行，所以小A要完成他的任务，可能需要更多的时间(期间他也需要等别人，阿姨不会一直为他一个人服务，但是阿姨为他服务的时间是没有变化的)，这种其实有点以时间换取用户体验(小B和小Ｃ的体验，小Ａ的体验可能就不会那么好了，但是小Ａ本来也非常耗时，所以多等一会是不是也没关系) 那么IO阻塞和CPU计算耗时阻塞这两者有什么区别呢？ 区别在于IO阻塞是不使用CPU的，而CPU计算耗时导致的阻塞是会使用CPU的。 例如上面的例子中，小A说忘记带钱了需要同学送钱，于是小A等着同学送钱过来，这个过程中阿姨并没有为小A提供服务，这个过程中为小A提供服务的是他的同学(送钱过来)，实际上小A的同学相当于现代计算机系统中的DMA(直接内存操作)，小A同学送钱的过程相当于DMA从磁盘读取数据到内存的过程，这个过程基本不需要CPU干预。 当然在DMA技术还没有出现的年代，从磁盘读取文件也是需要CPU发送指令去读取的，也就是说需要CPU的计算，应用到这里的场景中，就是阿姨亲自跑一趟帮小A把钱拿过来。8. 多线程与多进程上面描述的多线程实际上是讨论的是多线程的调度问题，这里我们说一说多线程与多进程与资源的分配问题。什么意思呢，一群人(多个线程)在一个桌子(进程)上吃饭，他们会涉及到一些问题，比如多个人可能会夹一个菜(竞争)，A和B同时看到盘子里面有一块肉，同时伸出筷子去夹，A先夹走，B迟了一点伸到盘子的时候已经没了，只能缩回来(临界资源，互斥)，有一个点心需要用馍夹肉一起吃。A夹了肉，B夹了馍，A需要B的馍，B需要A的肉，他们僵持不下谁都不让步(死锁)。 多线程之间的资源共享是非常方便的，因为他们共用进程的资源空间（在一个桌子上），但是需要注意一系列的问题，竞争，死锁，同步等。如果在旁边再开一个桌子(进程)。 那么桌子之间讲话，递东西又不方便(进程间通信)，而开一个桌子的开销比在一个桌子上多加一个人的开销要大。另外一个桌子上的人数不可能无限制增加，桌子的容量有限也坐不下这么多人(进程的线程句柄是有限制的)。一个桌子坏了不会影响到另一个桌子上面人的就餐情况(进程间相互独立，一个进程崩溃不会影响另一个)，而一个桌子上的某人喝挂了需要送医院，估计这一桌人都要散了(线程挂掉会导致整个进程也挂掉)。所以多线程与多进程是各有优缺点，不能一概而论。9. 总结单线程程序：适合IO异步，不能阻塞，不能有大量耗CPU的计算。典型如Nodejs，还有一些网络程序多线程程序：适合CPU密集型程序。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>简单明了</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开启编程之路-partrt_0]]></title>
    <url>%2F2018%2F09%2F03%2F%E5%BC%80%E5%90%AF%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF-partrt-0%2F</url>
    <content type="text"><![CDATA[自己的习题集菜鸟心得：自己刚开始学习编程难免会遇到许多阻碍，重要的是要一直坚持自己想要做的事,知道自己要什么。今天正式记录学习编程的点点滴滴。习题一1.给定 num = [2,7,11,15],target = 9 因为nums[0] + nums[1] = 2 + 7 = 9所以返回[0,1]代码示例Java语言1234567891011121314151617181920class Solution&#123; public int[] twoSum(int[],nums,int target) &#123; List list = new Arraylist&lt;Integer&gt;(); int result[] = new int[2]; for (int i = 0;i &lt; nums.length;i++) if (list.contains(target-nums[i])) &#123; result[0] = list.indexOf(target - nums[i]); result[1] = i; break; &#125; else &#123; list.add(nums[i]); &#125; return result; &#125;&#125; C++语言12345678910111213141516171819202122232425class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) &#123; vector&lt;int&gt; result = &#123;&#125;; for (size_t i = 0; i &lt; numbers.size(); i++) &#123; // 在numbers中找 target - numbers[i] 这个值 int numberFind = target - numbers[i]; auto iter = find(numbers.cbegin(), numbers.cend(), numberFind); if (iter != numbers.cend()) &#123; // 找到,算出其位置index int index = distance(numbers.cbegin(), iter); if (index == i) continue; result.emplace_back(i); result.emplace_back(index); break; &#125; &#125; return result; &#125;&#125;;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>记录自己的编程之旅</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何利用极限学习机进行分类]]></title>
    <url>%2F2018%2F08%2F30%2F%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%9E%81%E9%99%90%E5%AD%A6%E4%B9%A0%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[1.说明:极限学习机的基本概述本文利用极限学习机实现二分类及多分类最终实现跌倒和非跌倒的分类2.思路:利用极限学习机先对数据进行离线训练，得到训练模型后实时判断是否为跌倒状态3.离线训练代码示例:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899clc;clear;traindata=load('G:\serialPort\data\traindata1.csv');feature=traindata(1:end,5:13);label=traindata(:,14);%标签X=feature;[N,n]=size(X);L=500;m=5; % 慢走1，慢跑2，倒走3，“走楼梯“，”前跌“，后跌4，侧跌5， 5分类W=rand(n,L)*2-1;%权重-1到1b_1=rand(1,L);b=ones(N,1)*b_1;H=1./(1+exp(-X*W+b));temp_T=zeros(N,m);for i=1:N if(label(i)==1) temp_T(i,1)=1; temp_T(i,2)=0; temp_T(i,3)=0; temp_T(i,4)=0; temp_T(i,5)=0; end if(label(i)==2) temp_T(i,1)=0; temp_T(i,2)=1; temp_T(i,3)=0; temp_T(i,4)=0; temp_T(i,5)=0; end if(label(i)==3) temp_T(i,1)=0; temp_T(i,2)=0; temp_T(i,3)=1; temp_T(i,4)=0; temp_T(i,5)=0; end if(label(i)==4) temp_T(i,1)=0; temp_T(i,2)=0; temp_T(i,3)=0; temp_T(i,4)=1; temp_T(i,5)=0; end if(label(i)==5) temp_T(i,1)=0; temp_T(i,2)=0; temp_T(i,3)=0; temp_T(i,4)=0; temp_T(i,5)=1; endendT=temp_T*2-1;beta=pinv(H)*T;x_1=X(:,1);x_2=X(:,2);testfeature = feature;[N,n] = size(testfeature);testT = zeros(N,1);Tt = zeros(N,m);for i = 1:N h=1./(1+exp(-testfeature(i,:)*W+b_1)); t = h * beta; Tt(i,:) = t; if t(1) &gt; 0 &amp;&amp; t(2) &lt; 0 &amp;&amp; t(3) &lt; 0 &amp;&amp; t(4) &lt; 0 &amp;&amp; t(5) &lt; 0 testT(i) = 1; end if t(2) &gt; 0 &amp;&amp; t(1) &lt; 0 &amp;&amp; t(3) &lt; 0 &amp;&amp; t(4) &lt; 0 &amp;&amp; t(5) &lt; 0 testT(i) = 2; end if t(3) &gt; 0 &amp;&amp; t(1) &lt; 0 &amp;&amp; t(2) &lt; 0 &amp;&amp; t(4) &lt; 0 &amp;&amp; t(5) &lt; 0 testT(i) = 3; end if t(4) &gt; 0 &amp;&amp; t(1) &lt; 0 &amp;&amp; t(3) &lt; 0 &amp;&amp; t(2) &lt; 0 &amp;&amp; t(5) &lt; 0 testT(i) = 4; end if t(5) &gt; 0 &amp;&amp; t(1) &lt; 0 &amp;&amp; t(3) &lt; 0 &amp;&amp; t(4) &lt; 0 &amp;&amp; t(2) &lt; 0 testT(i) = 5; endendfor i = 1:14 test = testT(40000+(i-1)*350:40000+i*350,:); fall = 0; stand = 0; for j=1:350 if test(j) == 4 || test(j) == 5 fall = fall+1; else stand = stand+1; end end if fall &gt; stand disp('跌倒') else disp('正常') endend% test = testT(end-350:end,:);csvwrite('G:\serialPort\data\weight.csv',W);csvwrite('G:\serialPort\data\beta.csv',beta);csvwrite('G:\serialPort\data\bias.csv',b_1);]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>ELM分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start 这是什吗?this is code test! Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>崭新的世界</category>
      </categories>
      <tags>
        <tag>认识陌生人</tag>
      </tags>
  </entry>
</search>
