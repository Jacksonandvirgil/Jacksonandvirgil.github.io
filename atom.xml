<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李栋豪的个人博客之旅</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-11T02:50:21.446Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李栋豪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>以生活的例子说明单线程和多线程</title>
    <link href="http://yoursite.com/2018/09/11/%E4%BB%A5%E7%94%9F%E6%B4%BB%E7%9A%84%E4%BE%8B%E5%AD%90%E8%AF%B4%E6%98%8E%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/09/11/以生活的例子说明单线程和多线程/</id>
    <published>2018-09-11T02:19:46.000Z</published>
    <updated>2018-09-11T02:50:21.446Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 程序设计的目标</strong><br>在我看来单从程序的角度来看，一个好的程序的目标应该是性能与用户体验的平衡。当然一个程序是否能够满足用户的需求暂且不谈，这是业务层面的问题，我们仅仅讨论程序本身。围绕两点来展开，性能与用户体验。</p><p>性能：在其他同等条件下，高性能的程序应该可以等同于CPU的利用率，CPU的利用率越高(一直在工作，没有闲下来的时候)，程序的性能越高。</p><p>体验：这里的体验不只是界面多么漂亮，功能多么顺手，这里的体验指程序的响应速度，响应速度越快，用户体验越好。</p><p>下面我们就这两点进行各种模型的讨论<br><strong>2. 单线程多任务无阻塞</strong><br>以生活中食堂打饭的场景作为比喻，假设有这样的场景，小A，小B，小C 在窗口依次排队打饭。 假设窗口负责打饭的阿姨打一个菜需要耗时1秒。如果小A需要2个菜，小B需要3个菜，小C需要2个菜。如下：</p><p>阿姨(CPU)：打一个菜需要1秒<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小A：<span class="number">2</span>个菜</span><br><span class="line">小B：<span class="number">3</span>个菜</span><br><span class="line">小C：<span class="number">2</span>个菜</span><br></pre></td></tr></table></figure></p><p>那么在这种模型下将所有服务做完阿姨需要耗时 2 + 3 + 2 = 7秒</p><p>阿姨 = CPU</p><p>小A,小B,小C = 任务(这里是以任务为概念，表示需要做一些事情)</p><p>这种模型下CPU是满负荷不间断运转的，没有空闲，用户体验还不错。这种程序中每个任务的耗时都比较小，是非常理想的状态，一般情况下基本不太可能存在。<br><strong>3. 单线程多任务IO阻塞</strong></p><p>将上面的场景稍微做改动：</p><p>阿姨：打一个菜需要1秒<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小A：<span class="number">2</span>个菜，但是忘记带钱了，要找同学送过来，估计需要等<span class="number">5</span>分钟可以送到(可以理解为磁盘IO)</span><br><span class="line">小B：<span class="number">3</span>个菜</span><br><span class="line">小C：<span class="number">2</span>个菜</span><br></pre></td></tr></table></figure></p><p>这种情况下小A这里发生了阻塞，实际上小A这里耗费了5分钟也就是 300秒+ 2个菜的时间，也就是302秒，而CPU则空闲了300秒，实际上工作2秒。</p><p>所有服务做完花费 302 + 3 + 2 = 307秒  CPU实际工作7秒，等待300秒。 极大浪费了CPU的时钟周期。 用户体验很差，因为小A阻塞的时候，后面的所有人都等着，而实际上此时CPU空闲。所以单线程中不要有阻塞出现。<br><strong>4. 单线程多任务异步IO</strong></p><p>还是上面的模型，加入一个角色：值日生小哥，他负责事先询问每一个人是否带钱了，如果带钱了则允许打菜，否则把钱准备好了再说。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">1</span>&gt; 值日生小哥问小A准备好打菜了吗，小A说忘带钱了，值日生小哥说，你把钱准备好了再说，小A开始准备(需要<span class="number">300</span>秒，从此刻开始记时)。</span><br><span class="line">&lt;<span class="number">2</span>&gt; 值日生小哥问小B准备好打菜了吗，小B说可以了，阿姨服务小B，耗时<span class="number">3</span>秒</span><br><span class="line">&lt;<span class="number">3</span>&gt; 值日生小哥问小C准备好打菜了吗，小C说可以了，阿姨服务小C，耗时<span class="number">2</span>秒</span><br><span class="line">&lt;<span class="number">4</span>&gt; 值日生小哥问小A准备好了没有，小A说还要等一会，阿姨由于没有人过来服务，处于空闲状态</span><br><span class="line">&lt;<span class="number">5</span>&gt; <span class="number">300</span>秒之后，小A准备好了，阿姨服务小A，耗时<span class="number">2</span>秒</span><br></pre></td></tr></table></figure></p><p>整个过程做完耗时 300 + 2 = 302秒  CPU工作7秒，空闲295秒</p><p>值日生小哥相当于select模型中的select功能，负责轮询任务是否可以工作，如果可以则直接工作，否则继续轮询。在小A阻塞的300秒里面，阿姨(CPU)没有傻等，而是在服务后面的人，也就是小B和小C，所以这里与模型3不同的是，这里有5秒CPU是工作的。 如果打饭的人越多，这种模型CPU的利用率越高，例如如果有小D，小E，小F…… 等需要服务，CPU可以在小A阻塞的300秒期间内继续服务其他人。实际上值日生小哥轮询也会耗时，这个耗时是很少的，几乎可以忽略不计，但是如果任务非常多，这个轮询还是会影响性能的，但是epoll模型已经不使用轮询的方式，相当于A，B，C会主动跟值日生小哥报告，说我准备好了，可以直接打菜了。</p><p>这种模式下用户体验好，CPU利用率高(任务越多利用率越高)<br><strong>5. 单线程多任务，有耗时计算</strong><br>回到最开始的模型，如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">阿姨：打一个菜需要<span class="number">1</span>秒</span><br><span class="line">小A：<span class="number">200</span>个菜</span><br><span class="line">小B：<span class="number">3</span>个菜</span><br><span class="line">小C：<span class="number">2</span>个菜</span><br></pre></td></tr></table></figure></p><p>顺序做完所有任务，需要耗时 200 + 3 + 2 = 205秒， CPU无空闲，但是用户体验却不是很好，因为显然后面的 B，C 需要等待小A 200秒的时间，这种情况下是没有IO阻塞的，但是任务A本身太耗CPU了，所以说如果单线程中出现了耗时的操作，一定会影响体验(IO操作或者是耗时的计算都属于耗时的操作，都会导致阻塞，但是这两种导致阻塞的性质是不一样的)。在所有的单线程模型中都不允许出现阻塞的情况，如果出现，那么用户体验是极差的，例如在UI编程中(QT,C# Winform)是不允许在UI线程中做耗时的操作的，否则会导致UI界面无响应。 编写Nodejs程序的时候，我们所写的代码实际上是在一个线程中执行的，所以也不允许有阻塞的操作(当然整个Nodejs框架实现异步，一定不止一个线程)。</p><p>出现阻塞的情况一般有2种，一种是IO阻塞，例如典型的如磁盘操作，这种情况下的阻塞会导致CPU空闲等待(当然现代操作系统中如果IO阻塞，操作系统一定会将导致IO阻塞的线程挂起)。这种阻塞的情况，可以通过异步IO的方法避免，这样就避免程序中仅有的单线程被操作系统挂起。另一种情况下是确实有非常多的计算操作，例如一个复杂的加密算法，确实需要消耗非常多的CPU时间，这种情况下CPU并不是空闲的，反而是全负荷工作的。这种CPU密集的工作不适合放在单线程中，虽然CPU的利用率很高，但是用户体验并不是很好。这种情况下使用多线程反而会更好，例如如果3个任务，每个任务都在一个线程中，也就是有3个线程，A任务在ThreadA中，B任务在ThreadB中，C任务在ThreadC中，那么即使A任务的计算量比较大，B，C两个任务所在的线程也不必等待A任务完成之后再工作，他们也有机会得到调度，这是由操作系统来完成的。这样就不会因为某一个任务计算量大，而导致阻塞其他任务而影响体验了。<br>回到顶部<br><strong>6. 多线程程序</strong><br>我们将上面的模型改造成多线程的模型是怎样的呢，我们在模型5的基础上添加一个角色，管理员大叔(操作系统的角色)：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">阿姨：打一个菜需要<span class="number">1</span>秒</span><br><span class="line">小A：<span class="number">200</span>个菜</span><br><span class="line">小B：<span class="number">3</span>个菜</span><br><span class="line">小C：<span class="number">2</span>个菜</span><br></pre></td></tr></table></figure></p><p>加入管理员大叔之后变成这样的了，小A打两个菜之后，大叔说，你打的菜太多了，不能因为你要打200个菜，让后面的同学都没有机会打菜，你打两个菜之后等一会，让后面的同学也有机会。</p><p>大叔让小B打两个菜，然后让小C打两个菜(小C完成)，然后再让小A打两个菜(完成之后小A总共就有4个菜了)，再让小B打1个菜(此时小B总共打3个菜，完成)，然后小A打剩下的196个菜。</p><p>CPU的利用率：很高，阿姨在不断的工作</p><p>用户体验：不错，即使小A要打200个菜，小B，小C也有机会。 当然如果小A说我是帮校长打菜，要快一点(线程优先级高)，那也只能先把小A服务完</p><p>总耗时：   200 + 3 + 2 + (大叔指挥安排所消耗的时间，包括从小C切换回小A的时候，大叔要知道小A上次打的菜是哪两个，这次应该接着打什么菜，这相当于线程上下文切换的开销以及线程环境的保存与恢复)，所以并不是线程越多越好，线程非常多的时候大叔估计会焦头烂额吧，要记住这么状态，切换来切换去也耗时间。</p><p>这种模型下实际上是将小A的耗时任务，分成多份去执行而不是集中执行，所以小A要完成他的任务，可能需要更多的时间(期间他也需要等别人，阿姨不会一直为他一个人服务，但是阿姨为他服务的时间是没有变化的)，这种其实有点以时间换取用户体验(小B和小Ｃ的体验，小Ａ的体验可能就不会那么好了，但是小Ａ本来也非常耗时，所以多等一会是不是也没关系)</p><p>那么IO阻塞和CPU计算耗时阻塞这两者有什么区别呢？ 区别在于IO阻塞是不使用CPU的，而CPU计算耗时导致的阻塞是会使用CPU的。 例如上面的例子中，小A说忘记带钱了需要同学送钱，于是小A等着同学送钱过来，这个过程中阿姨并没有为小A提供服务，这个过程中为小A提供服务的是他的同学(送钱过来)，实际上小A的同学相当于现代计算机系统中的DMA(直接内存操作)，小A同学送钱的过程相当于DMA从磁盘读取数据到内存的过程，这个过程基本不需要CPU干预。</p><p>当然在DMA技术还没有出现的年代，从磁盘读取文件也是需要CPU发送指令去读取的，也就是说需要CPU的计算，应用到这里的场景中，就是阿姨亲自跑一趟帮小A把钱拿过来。<br><strong>8. 多线程与多进程</strong><br>上面描述的多线程实际上是讨论的是多线程的调度问题，这里我们说一说多线程与多进程与资源的分配问题。什么意思呢，一群人(多个线程)在一个桌子(进程)上吃饭，他们会涉及到一些问题，比如多个人可能会夹一个菜(竞争)，A和B同时看到盘子里面有一块肉，同时伸出筷子去夹，A先夹走，B迟了一点伸到盘子的时候已经没了，只能缩回来(临界资源，互斥)，有一个点心需要用馍夹肉一起吃。A夹了肉，B夹了馍，A需要B的馍，B需要A的肉，他们僵持不下谁都不让步(死锁)。</p><p>多线程之间的资源共享是非常方便的，因为他们共用进程的资源空间（在一个桌子上），但是需要注意一系列的问题，竞争，死锁，同步等。如果在旁边再开一个桌子(进程)。 那么桌子之间讲话，递东西又不方便(进程间通信)，而开一个桌子的开销比在一个桌子上多加一个人的开销要大。另外一个桌子上的人数不可能无限制增加，桌子的容量有限也坐不下这么多人(进程的线程句柄是有限制的)。一个桌子坏了不会影响到另一个桌子上面人的就餐情况(进程间相互独立，一个进程崩溃不会影响另一个)，而一个桌子上的某人喝挂了需要送医院，估计这一桌人都要散了(线程挂掉会导致整个进程也挂掉)。所以多线程与多进程是各有优缺点，不能一概而论。<br><strong>9. 总结</strong><br>单线程程序：适合IO异步，不能阻塞，不能有大量耗CPU的计算。典型如Nodejs，还有一些网络程序<br>多线程程序：适合CPU密集型程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1. 程序设计的目标&lt;/strong&gt;&lt;br&gt;在我看来单从程序的角度来看，一个好的程序的目标应该是性能与用户体验的平衡。当然一个程序是否能够满足用户的需求暂且不谈，这是业务层面的问题，我们仅仅讨论程序本身。围绕两点来展开，性能与用户体验。&lt;/p&gt;
&lt;p&gt;性能
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="简单明了" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95%E6%98%8E%E4%BA%86/"/>
    
  </entry>
  
  <entry>
    <title>开启编程之路-partrt_0</title>
    <link href="http://yoursite.com/2018/09/03/%E5%BC%80%E5%90%AF%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF-partrt-0/"/>
    <id>http://yoursite.com/2018/09/03/开启编程之路-partrt-0/</id>
    <published>2018-09-03T02:20:52.000Z</published>
    <updated>2018-09-03T09:31:59.887Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>自己的习题集</em></strong><br>菜鸟心得：自己刚开始学习编程难免会遇到许多阻碍，重要的是要一直坚持自己想要做的事,知道自己要什么。今天正式记录学习编程的点点滴滴。<br><strong><em>习题一</em></strong><br>1.给定 num = [2,7,11,15],target = 9<br> 因为nums[0] + nums[1] = 2 + 7 = 9<br>所以返回[0,1]<br><strong><em>代码示例</em></strong><br><em>Java语言</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[],nums,<span class="keyword">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line">List list = <span class="keyword">new</span> Arraylist&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)</span><br><span class="line"><span class="keyword">if</span> (list.contains(target-nums[i]))</span><br><span class="line">&#123;</span><br><span class="line">result[<span class="number">0</span>] = list.indexOf(target - nums[i]);</span><br><span class="line">result[<span class="number">1</span>] = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">list.add(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>C++语言</em><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; numbers.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 在numbers中找 target - numbers[i] 这个值</span></span><br><span class="line">            <span class="keyword">int</span> numberFind = target - numbers[i];</span><br><span class="line">            <span class="keyword">auto</span> iter = find(numbers.cbegin(), numbers.cend(), numberFind);</span><br><span class="line">            <span class="keyword">if</span> (iter != numbers.cend())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 找到,算出其位置index</span></span><br><span class="line">                <span class="keyword">int</span> index = distance(numbers.cbegin(), iter);</span><br><span class="line">                <span class="keyword">if</span> (index == i)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                result.emplace_back(i);</span><br><span class="line">                result.emplace_back(index);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;自己的习题集&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;菜鸟心得：自己刚开始学习编程难免会遇到许多阻碍，重要的是要一直坚持自己想要做的事,知道自己要什么。今天正式记录学习编程的点点滴滴。&lt;br&gt;&lt;strong&gt;&lt;em&gt;习题一&lt;/em&gt;&lt;/strong&gt;&lt;br
      
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="记录自己的编程之旅" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%97%85/"/>
    
  </entry>
  
  <entry>
    <title>如何利用极限学习机进行分类</title>
    <link href="http://yoursite.com/2018/08/30/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%9E%81%E9%99%90%E5%AD%A6%E4%B9%A0%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/08/30/如何利用极限学习机进行分类/</id>
    <published>2018-08-30T12:07:22.000Z</published>
    <updated>2018-09-01T14:17:28.887Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.说明:</strong><br>极限学习机的基本概述<br>本文利用极限学习机实现二分类及多分类<br>最终实现跌倒和非跌倒的分类<br><strong>2.思路:</strong><br>利用极限学习机先对数据进行离线训练，得到训练模型后实时判断是否为跌倒状态<br><strong>3.离线训练代码示例:</strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line">traindata=load(<span class="string">'G:\serialPort\data\traindata1.csv'</span>);</span><br><span class="line">feature=traindata(<span class="number">1</span>:<span class="keyword">end</span>,<span class="number">5</span>:<span class="number">13</span>);</span><br><span class="line">label=traindata(:,<span class="number">14</span>);<span class="comment">%标签</span></span><br><span class="line">X=feature;</span><br><span class="line">[N,n]=<span class="built_in">size</span>(X);</span><br><span class="line">L=<span class="number">500</span>;</span><br><span class="line">m=<span class="number">5</span>;               <span class="comment">% 慢走1，慢跑2，倒走3，“走楼梯“，”前跌“，后跌4，侧跌5， 5分类</span></span><br><span class="line">W=<span class="built_in">rand</span>(n,L)*<span class="number">2</span><span class="number">-1</span>;<span class="comment">%权重-1到1</span></span><br><span class="line">b_1=<span class="built_in">rand</span>(<span class="number">1</span>,L);</span><br><span class="line">b=<span class="built_in">ones</span>(N,<span class="number">1</span>)*b_1;</span><br><span class="line">H=<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-X*W+b));</span><br><span class="line">temp_T=<span class="built_in">zeros</span>(N,m);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">    <span class="keyword">if</span>(label(<span class="built_in">i</span>)==<span class="number">1</span>)</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">1</span>)=<span class="number">1</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">2</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">3</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">4</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">5</span>)=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span>(label(<span class="built_in">i</span>)==<span class="number">2</span>)</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">2</span>)=<span class="number">1</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">3</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">4</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">5</span>)=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span>(label(<span class="built_in">i</span>)==<span class="number">3</span>)</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">2</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">3</span>)=<span class="number">1</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">4</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">5</span>)=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span>(label(<span class="built_in">i</span>)==<span class="number">4</span>)</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">2</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">3</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">4</span>)=<span class="number">1</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">5</span>)=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span>(label(<span class="built_in">i</span>)==<span class="number">5</span>)</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">2</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">3</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">4</span>)=<span class="number">0</span>;</span><br><span class="line">        temp_T(<span class="built_in">i</span>,<span class="number">5</span>)=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">T=temp_T*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line"><span class="built_in">beta</span>=pinv(H)*T;</span><br><span class="line">x_1=X(:,<span class="number">1</span>);</span><br><span class="line">x_2=X(:,<span class="number">2</span>);</span><br><span class="line">testfeature = feature;</span><br><span class="line">[N,n] = <span class="built_in">size</span>(testfeature);</span><br><span class="line">testT = <span class="built_in">zeros</span>(N,<span class="number">1</span>);</span><br><span class="line">Tt = <span class="built_in">zeros</span>(N,m);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:N</span><br><span class="line">    h=<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-testfeature(<span class="built_in">i</span>,:)*W+b_1));</span><br><span class="line">    t = h * <span class="built_in">beta</span>;</span><br><span class="line">    Tt(<span class="built_in">i</span>,:) = t;</span><br><span class="line">    <span class="keyword">if</span> t(<span class="number">1</span>) &gt; <span class="number">0</span> &amp;&amp; t(<span class="number">2</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">3</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">4</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">5</span>) &lt; <span class="number">0</span></span><br><span class="line">        testT(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> t(<span class="number">2</span>) &gt; <span class="number">0</span> &amp;&amp; t(<span class="number">1</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">3</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">4</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">5</span>) &lt; <span class="number">0</span></span><br><span class="line">        testT(<span class="built_in">i</span>) = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> t(<span class="number">3</span>) &gt; <span class="number">0</span> &amp;&amp; t(<span class="number">1</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">2</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">4</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">5</span>) &lt; <span class="number">0</span></span><br><span class="line">        testT(<span class="built_in">i</span>) = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> t(<span class="number">4</span>) &gt; <span class="number">0</span> &amp;&amp; t(<span class="number">1</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">3</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">2</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">5</span>) &lt; <span class="number">0</span></span><br><span class="line">        testT(<span class="built_in">i</span>) = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> t(<span class="number">5</span>) &gt; <span class="number">0</span> &amp;&amp; t(<span class="number">1</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">3</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">4</span>) &lt; <span class="number">0</span> &amp;&amp; t(<span class="number">2</span>) &lt; <span class="number">0</span></span><br><span class="line">        testT(<span class="built_in">i</span>) = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">14</span></span><br><span class="line">    test = testT(<span class="number">40000</span>+(<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">350</span>:<span class="number">40000</span>+<span class="built_in">i</span>*<span class="number">350</span>,:);</span><br><span class="line">    fall = <span class="number">0</span>;  stand = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="number">350</span></span><br><span class="line">        <span class="keyword">if</span> test(<span class="built_in">j</span>) == <span class="number">4</span> || test(<span class="built_in">j</span>) == <span class="number">5</span></span><br><span class="line">            fall = fall+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stand = stand+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span>     </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> fall &gt; stand</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">'跌倒'</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">'正常'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% test = testT(end-350:end,:);</span></span><br><span class="line">csvwrite(<span class="string">'G:\serialPort\data\weight.csv'</span>,W);</span><br><span class="line">csvwrite(<span class="string">'G:\serialPort\data\beta.csv'</span>,<span class="built_in">beta</span>);</span><br><span class="line">csvwrite(<span class="string">'G:\serialPort\data\bias.csv'</span>,b_1);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.说明:&lt;/strong&gt;&lt;br&gt;极限学习机的基本概述&lt;br&gt;本文利用极限学习机实现二分类及多分类&lt;br&gt;最终实现跌倒和非跌倒的分类&lt;br&gt;&lt;strong&gt;2.思路:&lt;/strong&gt;&lt;br&gt;利用极限学习机先对数据进行离线训练，得到训练模型后实时判断是否为
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ELM分类" scheme="http://yoursite.com/tags/ELM%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/29/hello-world/"/>
    <id>http://yoursite.com/2018/08/29/hello-world/</id>
    <published>2018-08-29T07:44:10.299Z</published>
    <updated>2018-08-30T12:19:11.108Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><blockquote><p>这是什吗?<br>this is code test!</p></blockquote><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="崭新的世界" scheme="http://yoursite.com/categories/%E5%B4%AD%E6%96%B0%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="认识陌生人" scheme="http://yoursite.com/tags/%E8%AE%A4%E8%AF%86%E9%99%8C%E7%94%9F%E4%BA%BA/"/>
    
  </entry>
  
</feed>
